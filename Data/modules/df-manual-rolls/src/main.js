/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={"../common/Settings.ts":(e,t,l)=>{l.r(t),l.d(t,{default:()=>SETTINGS});class SETTINGS{static init(e){this.MOD_NAME=e,String.prototype.localize||(String.prototype.localize=function(){return game.i18n.localize(this.valueOf())})}static register(e,t){game.settings.register(SETTINGS.MOD_NAME,e,t)}static registerMenu(e,t){game.settings.registerMenu(SETTINGS.MOD_NAME,e,t)}static get(e){return game.settings.get(SETTINGS.MOD_NAME,e)}static async set(e,t){return await game.settings.set(SETTINGS.MOD_NAME,e,t)}static default(e){return game.settings.settings.get(SETTINGS.MOD_NAME+"."+e).default}static typeOf(){return Object}}},"./src/ManualRolls.ts":(e,t,l)=>{l.r(t),l.d(t,{default:()=>ManualRolls});var a=l("./src/RollPrompt.ts"),s=l("../common/Settings.ts");String.prototype.dfmr_replaceAll=function(e,t){return this.split(e).join(t)};class ManualRolls{static get flagged(){return s.default.get(ManualRolls.PREF_FLAGGED)}static get toggled(){return s.default.get(ManualRolls.PREF_TOGGLED)}static setToggled(e){return s.default.set(ManualRolls.PREF_TOGGLED,e)}static get toggleable(){return"toggle"===(game.user.getFlag(s.default.MOD_NAME,ManualRolls.FLAG_ROLL_TYPE)||s.default.get(game.user.isGM?ManualRolls.PREF_GM_STATE:ManualRolls.PREF_PC_STATE))}static get shouldRollManually(){const e=game.user.getFlag(s.default.MOD_NAME,ManualRolls.FLAG_ROLL_TYPE)||s.default.get(game.user.isGM?ManualRolls.PREF_GM_STATE:ManualRolls.PREF_PC_STATE);return!this.tempDisable&&("always"===e||"toggle"===e&&this.toggled)}static patch(){libWrapper.register(s.default.MOD_NAME,"Roll.prototype._evaluate",this._Roll_evaluate,"MIXED"),libWrapper.register(s.default.MOD_NAME,"DiceTerm.prototype._evaluate",this._DiceTerm_evaluate,"MIXED")}static unpatch(){libWrapper.unregister(s.default.MOD_NAME,"Roll.prototype._identifyTerms",!1),libWrapper.unregister(s.default.MOD_NAME,"DiceTerm.prototype.roll",!1)}static async _Roll_evaluate(e,{minimize:t=!1,maximize:l=!1}={}){if(!ManualRolls.shouldRollManually||t||l)return e({minimize:t,maximize:l});const s=[];for(const e of this.terms){let a=e;if(!(a instanceof RollTerm))throw new Error("Roll evaluation encountered an invalid term which was not a RollTerm instance");a.isIntermediate&&(await a.evaluate({minimize:t,maximize:l,async:!0}),this._dice=this._dice.concat(a.dice),a=new NumericTerm({number:a.total,options:a.options})),s.push(a)}this.terms=s,this.terms=this.constructor.simplifyTerms(this.terms);const i=new a.default({},this.options.flavor?{title:this.options.flavor}:{});for(const e of this.terms)e instanceof DiceTerm&&(e.rollPrompt=i);const o=[];for(const e of this.terms)e._evaluated||o.push(e.evaluate({minimize:t,maximize:l,async:!0}));return await i.render(!0),await Promise.all(o),this._total=this._evaluateTotal(),this}static async _DiceTerm_evaluate(e,{minimize:t=!1,maximize:l=!1}={}){const a=this.rollPrompt;if(!ManualRolls.shouldRollManually||!a||t||l)return e(t,l);const s=await a.requestResult(this);for(const e of s)this.results.push({result:e,active:!0});return this._evaluateModifiers(),this}}ManualRolls.PREF_GM_STATE="gm",ManualRolls.PREF_PC_STATE="pc",ManualRolls.PREF_FLAGGED="flagged",ManualRolls.PREF_TOGGLED="toggled",ManualRolls.FLAG_ROLL_TYPE="roll-type",ManualRolls.tempDisable=!1},"./src/ManualRollsLegacy.ts":(e,t,l)=>{l.r(t),l.d(t,{default:()=>ManualRollsLegacy});var a=l("./src/ManualRolls.ts"),s=l("./src/RollPrompt.ts"),i=l("../common/Settings.ts");class ManualRollsLegacy{static get useLegacy(){return i.default.get(ManualRollsLegacy.PREF_USE_LEGACY)}static patch(){libWrapper.register(i.default.MOD_NAME,"DiceTerm.prototype._evaluateSync",this._DiceTerm_evaluateSync,"MIXED"),this.pf1HelpersPatched||(this.pf1HelpersPatched=!0,Handlebars.registerHelper("itemDamage",((e,t)=>{var l,s;if(!e.hasDamage)return null;const i=e.document.parentActor.data.data,o=e.data,r=[],reduceFormula=e=>{let l;try{a.default.tempDisable=!0,l=RollPF.safeRoll(e,t)}finally{a.default.tempDisable=!1}return e=l.formula.replace(/\[[^\]]+\]/g,""),[l,e]},handleParts=e=>{for(const[t,l]of e){const[e,l]=reduceFormula(t);0!=e.total&&r.push(l)}};handleParts(o.damage.parts);const n=o.ability.damage,u=Math.floor((null!==(s=null===(l=i.abilities[n])||void 0===l?void 0:l.mod)&&void 0!==s?s:0)*(o.ability.damageMult||1));0!=u&&r.push(u),handleParts(o.damage.nonCritParts);const c=e.document.allDamageSources;for(const e of c)r.push(e.formula);return 0===r.length&&r.push("NaN"),r.join("+").replace(/\s+/g,"").replace(/\+-/,"-").replace(/--/g,"+").replace(/\+\++/,"+")})))}static unpatch(){libWrapper.unregister(i.default.MOD_NAME,"DiceTerm.prototype.roll",!1)}static _DiceTerm_evaluateSync(e,{minimize:t=!1,maximize:l=!1}={}){if(this.number>999)throw new Error("You may not evaluate a DiceTerm with more than 999 requested results");if(!a.default.shouldRollManually||t||l)return e({minimize:t,maximize:l});if(0==this.modifiers.length){const e=ManualRollsLegacy.prompt(this.number,this.faces,this.flavor),t=s.default.distributeRoll(e[0],this.number);this.results=t.map((e=>({result:e,active:!0}))),a.default.flagged&&e[1]&&(this.options.flavor=(this.options.flavor||"")+"[MRT]",this.options.isManualRoll=!0)}else{const e=[];for(let a=1;a<=this.number;a++){const a={result:void 0,active:!0};if(t)a.result=Math.min(1,this.faces),e.push("RN");else if(l)a.result=this.faces,e.push("RN");else{const t=ManualRollsLegacy.prompt(1,this.faces,this.flavor);a.result=t[0],e.push(t[1]?"MR":"RN")}this.results.push(a)}a.default.flagged&&e.some((e=>"MR"===e))&&(this.options.flavor=(this.options.flavor||"")+"["+e.join(",")+"]",this.options.isManualRoll=!0)}return this._evaluateModifiers(),this}static prompt(e,t,l){let a=!1,s=[0,!1];const i=game.i18n.localize("DF_MANUAL_ROLLS.Prompt.Legacy").dfmr_replaceAll("{0}",e.toString()).dfmr_replaceAll("{1}",t.toString()).dfmr_replaceAll("{2}",(e*t).toString()),o=game.i18n.localize("DF_MANUAL_ROLLS.Prompt.Legacy_Invalid");for(;;){let r=prompt(i+(l?`\n${l}`:"")+(a?"\n"+o:""),"");if(""===r||null===r)s=[Math.ceil(CONFIG.Dice.randomUniform()*t),!1];else if(r=parseInt(r),s=[r,!0],isNaN(r)||r<e||r>e*t){a=!0;continue}return s}}}ManualRollsLegacy.PREF_USE_LEGACY="use-legacy",ManualRollsLegacy.pf1HelpersPatched=!1},"./src/RollPrompt.ts":(e,t,l)=>{l.r(t),l.d(t,{default:()=>RollPrompt});var a=l("./src/ManualRolls.ts"),s=l("../common/Settings.ts");class RollPrompt extends FormApplication{constructor(){super(...arguments),this._nextId=0,this._terms=[],this._rolled=!1}static get focusInput(){return s.default.get(RollPrompt.PREF_FOCUS_INPUT)}static get defaultOptions(){return mergeObject(FormApplication.defaultOptions,{title:game.i18n.localize("DF_MANUAL_ROLLS.Prompt.DefaultTitle"),template:`modules/${s.default.MOD_NAME}/templates/roll-prompt.hbs`,width:400})}getData(e){const t=[];for(const e of this._terms){const l=e.term;for(let a=0;a<l.number;a++)t.push({id:e.id.toString(),idx:a,faces:0==a?`${l.number}d${l.faces}${l.modifiers.length>0?" ["+l.modifiers.join(",")+"]":""}`:"",hasTotal:0==a&&0==l.modifiers.length&&l.number>1,term:l})}return{terms:t}}close(e){if(!this._rolled){this._rolled=!0;for(const e of this._terms){const t=[];for(let l=0;l<e.term.number;l++)t.push(Math.ceil(CONFIG.Dice.randomUniform()*e.term.faces));e.res(t)}}return super.close(e)}render(e,t){if(0!=this._terms.length)return super.render(e,t)}async _render(e,t){await super._render(e,t),RollPrompt.focusInput&&this.element.find("input")[0].focus()}_updateObject(e,t){for(const e of this._terms){const l=[],s=t[`${e.id}-total`];if(null!=s){const t=parseInt(s);l.push(...RollPrompt.distributeRoll(t,e.term.number)),a.default.flagged&&(e.term.options.flavor=(e.term.options.flavor||"")+"[MRT]")}else{const s=[];for(let a=0;a<e.term.number;a++){const i=t[`${e.id}-${a}`];let o=parseInt(i);isNaN(o)?(o=Math.ceil(CONFIG.Dice.randomUniform()*e.term.faces),s.push("RN")):(s.push("MR"),e.term.options.isManualRoll=!0),l.push(o)}a.default.flagged&&s.some((e=>"MR"===e))&&(e.term.options.flavor=(e.term.options.flavor||"")+"["+s.join(",")+"]",e.term.options.isManualRoll=!0)}e.res(l)}this._rolled=!0}requestResult(e){return new Promise(((t,l)=>this._terms.push({id:this._nextId++,res:t,term:e})))}static distributeRoll(e,t){const l=[];let a=0;for(let s=0;s<t-1;s++)a=Math.ceil(e/(t-l.length)),e-=a,l.push(a);return l.push(e),l}}RollPrompt.PREF_FOCUS_INPUT="focus-input"},"./src/RollSettings.ts":(e,t,l)=>{l.r(t),l.d(t,{default:()=>RollSettings});var a=l("../common/Settings.ts"),s=l("./src/ManualRolls.ts");class RollSettings{static init(){Hooks.on("renderPlayerList",((e,t)=>{game.user.isGM&&t.find("li.player").each(((e,t)=>{var l;const i=t.getAttribute("data-user-id"),o=game.users.get(i);if(!o.getFlag(a.default.MOD_NAME,s.default.FLAG_ROLL_TYPE))return;let r="";switch(null!==(l=o.getFlag(a.default.MOD_NAME,s.default.FLAG_ROLL_TYPE))&&void 0!==l?l:a.default.get(s.default.PREF_PC_STATE)){case"disabled":r=`<i class="fas fa-dice" title="${"DF_MANUAL_ROLLS.Setting_Options.Disabled".localize()}"></i>`;break;case"always":r=`<i class="fas fa-keyboard" title="${"DF_MANUAL_ROLLS.Setting_Options.Always".localize()}"></i>`;break;case"toggle":r=`<i class="fas fa-toggle-on" title="${"DF_MANUAL_ROLLS.Setting_Options.Toggle".localize()}"></i>`}$(t).append(`<span class="player-roll-type">${r}</span>`)}))})),Hooks.on("renderUserConfig",((e,t)=>{if(!game.user.isGM)return;const l=e.object.getFlag(a.default.MOD_NAME,s.default.FLAG_ROLL_TYPE),i=$(`<div class="form-group">\n\t<label>${"Manual Roll Override".localize()}</label>\n\t<div class="form-fields" style="width:${t.find("#characters").parent().outerWidth()}px">\n\t\t<select name="flags.df-manual-rolls.roll-type">\n\t\t\t<option value="" ${l?"":"selected"}></option>\n\t\t\t<option value="disabled" ${"disabled"===l?"selected":""}>${"DF_MANUAL_ROLLS.Setting_Options.Disabled".localize()}</option>\n\t\t\t<option value="always" ${"always"===l?"selected":""}>${"DF_MANUAL_ROLLS.Setting_Options.Always".localize()}</option>\n\t\t\t<option value="toggle" ${"toggle"===l?"selected":""}>${"DF_MANUAL_ROLLS.Setting_Options.Toggle".localize()}</option>\n\t\t</select>\n\t</div>\n</div>`);t.find("#characters").parent().before(i),e.element[0].style.height="",e.element[0].style.width="",e.setPosition({}),e._updateObject_ORIG||(e._updateObject_ORIG=e._updateObject,e._updateObject=async function(...e){const t=await this._updateObject_ORIG(...e);return ui.controls.initialize(),t})}))}}}},t={};function __webpack_require__(l){var a=t[l];if(void 0!==a)return a.exports;var s=t[l]={exports:{}};return e[l](s,s.exports,__webpack_require__),s.exports}__webpack_require__.d=(e,t)=>{for(var l in t)__webpack_require__.o(t,l)&&!__webpack_require__.o(e,l)&&Object.defineProperty(e,l,{enumerable:!0,get:t[l]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var l={};(()=>{__webpack_require__.r(l);var e=__webpack_require__("./src/ManualRolls.ts"),t=__webpack_require__("./src/ManualRollsLegacy.ts"),a=__webpack_require__("./src/RollPrompt.ts"),s=__webpack_require__("../common/Settings.ts"),i=__webpack_require__("./src/RollSettings.ts");s.default.init("df-manual-rolls"),Hooks.on("init",(function(){s.default.register(e.default.PREF_GM_STATE,{config:!0,scope:"world",name:"DF_MANUAL_ROLLS.Settings.GM_Name",hint:"DF_MANUAL_ROLLS.Settings.GM_Hint",default:"disabled",choices:{disabled:"DF_MANUAL_ROLLS.Setting_Options.Disabled",always:"DF_MANUAL_ROLLS.Setting_Options.Always",toggle:"DF_MANUAL_ROLLS.Setting_Options.Toggle"},onChange:()=>{ui.controls.initialize()}}),s.default.register(e.default.PREF_PC_STATE,{config:!0,scope:"world",name:"DF_MANUAL_ROLLS.Settings.PC_Name",hint:"DF_MANUAL_ROLLS.Settings.PC_Hint",default:"disabled",choices:{disabled:"DF_MANUAL_ROLLS.Setting_Options.Disabled",always:"DF_MANUAL_ROLLS.Setting_Options.Always",toggle:"DF_MANUAL_ROLLS.Setting_Options.Toggle"},onChange:()=>{ui.controls.initialize()}}),s.default.register(a.default.PREF_FOCUS_INPUT,{config:!0,scope:"client",name:"DF_MANUAL_ROLLS.Settings.FocusInput_Name",hint:"DF_MANUAL_ROLLS.Settings.FocusInput_Hint",type:Boolean,default:!0}),s.default.register(e.default.PREF_FLAGGED,{name:"DF_MANUAL_ROLLS.Settings.Flagged_Name",hint:"DF_MANUAL_ROLLS.Settings.Flagged_Hint",scope:"world",config:!0,type:Boolean,default:!1}),s.default.register(e.default.PREF_TOGGLED,{config:!1,scope:"client",type:Boolean,default:!1,onChange:e=>{const t=$("ol#controls>li#df-manual-roll-toggle");e?t.addClass("active"):t.removeClass("active")}}),Hooks.on("getSceneControlButtons",(t=>{e.default.toggleable&&t.find((e=>"token"===e.name)).tools.push({icon:"fas fa-dice-d20",name:"manualRoll",title:"DF_MANUAL_ROLLS.SceneControlTitle",visible:e.default.toggleable,toggle:!0,active:e.default.toggled,onClick:t=>e.default.setToggled(t)})})),s.default.register(t.default.PREF_USE_LEGACY,{name:"Enable Legacy Synchronous Rolls",hint:"Some systems and modules have not migrated their roll calls to the new Async Roll System in FoundryVTT. To handle the use of the deprecated legacy roll system, this will enabled the old prompts for roll input.",config:!0,scope:"world",type:Boolean,default:!1,onChange:e=>{e?t.default.patch():t.default.unpatch()}}),i.default.init()})),Hooks.on("ready",(function(){var l;(null===(l=game.modules.get("lib-wrapper"))||void 0===l?void 0:l.active)||!game.user.isGM?(Handlebars.registerHelper({dfmr_mul:(e,t)=>e*t}),e.default.patch(),s.default.get(t.default.PREF_USE_LEGACY)&&t.default.patch()):ui.notifications.error(game.i18n.localize("DF_MANUAL_ROLLS.Error_libWrapper_Missing"))})),Hooks.on("createChatMessage",(async t=>{if(!t.user||t.user.id!==game.userId)return;if(!t.isRoll||!e.default.flagged||!e.default.shouldRollManually)return;let l=game.i18n.localize("DF_MANUAL_ROLLS.Flag");t.roll.terms.some((e=>e instanceof DiceTerm&&e.options.isManualRoll))&&(t.data.flavor&&(l+=" "+t.data.flavor),await t.update({flavor:l}))}))})()})();
//# sourceMappingURL=main.js.map