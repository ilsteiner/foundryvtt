{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../common/Settings.ts","webpack:///./src/ManualRolls.ts","webpack:///./src/ManualRollsLegacy.ts","webpack:///./src/RollPrompt.ts","webpack:///./src/RollSettings.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/df-manual-rolls.ts"],"sourcesContent":["\ndeclare global {\n\tinterface LenientGlobalVariableTypes {\n\t\tgame: never;\n\t\tcanvas: never;\n\t}\n\tinterface String {\n\t\t/** Localizes the string via the global `game.i18n.localize()` function. */\n\t\tlocalize(): string\n\t}\n\ttype AnyFunction = (...args: any) => any;\n}\n\nexport default class SETTINGS {\n\tstatic MOD_NAME: string;\n\tstatic init(moduleName: string) {\n\t\tthis.MOD_NAME = moduleName;\n\t\tif (!String.prototype.localize) {\n\t\t\tString.prototype.localize = function () {\n\t\t\t\treturn game.i18n.localize(this.valueOf());\n\t\t\t};\n\t\t}\n\t}\n\tstatic register<T>(key: string, config: ClientSettings.PartialSettingConfig<T>) { game.settings.register(SETTINGS.MOD_NAME, key, config); }\n\tstatic registerMenu(key: string, config: ClientSettings.PartialSettingSubmenuConfig) { game.settings.registerMenu(SETTINGS.MOD_NAME, key, config); }\n\tstatic get<T>(key: string): T { return <T>game.settings.get(SETTINGS.MOD_NAME, key); }\n\tstatic async set<T>(key: string, value: T): Promise<T> { return await game.settings.set(SETTINGS.MOD_NAME, key, value); }\n\tstatic default<T>(key: string): T { return <T>game.settings.settings.get(SETTINGS.MOD_NAME + '.' + key).default; }\n\t/** helper for referencing a Typed constructor for the `type` field of a setting { type: SETTINGS.typeOf<MyClass>() } */\n\tstatic typeOf<T>(): ConstructorOf<T> { return Object as any; }\n}\n","import RollPrompt from \"./RollPrompt\";\nimport SETTINGS from \"../../common/Settings\";\n\ndeclare global {\n\tinterface String {\n\t\tdfmr_replaceAll(token: string, replacement: string): string;\n\t}\n}\nString.prototype.dfmr_replaceAll = function (token: string, replacement: string) { return this.split(token).join(replacement); };\n\nexport default class ManualRolls {\n\tstatic PREF_GM_STATE = 'gm';\n\tstatic PREF_PC_STATE = 'pc';\n\tstatic PREF_FLAGGED = 'flagged';\n\tstatic PREF_TOGGLED = 'toggled';\n\tstatic FLAG_ROLL_TYPE = 'roll-type';\n\n\tstatic get flagged(): boolean { return SETTINGS.get(ManualRolls.PREF_FLAGGED); }\n\tstatic get toggled(): boolean { return SETTINGS.get(ManualRolls.PREF_TOGGLED); }\n\tstatic setToggled(value: boolean): Promise<boolean> { return SETTINGS.set(ManualRolls.PREF_TOGGLED, value); }\n\tstatic get toggleable() {\n\t\treturn (game.user.getFlag(SETTINGS.MOD_NAME, ManualRolls.FLAG_ROLL_TYPE) || SETTINGS.get(game.user.isGM ? ManualRolls.PREF_GM_STATE : ManualRolls.PREF_PC_STATE)) === 'toggle';\n\t}\n\tstatic tempDisable = false;\n\tstatic get shouldRollManually() {\n\t\tconst state = game.user.getFlag(SETTINGS.MOD_NAME, ManualRolls.FLAG_ROLL_TYPE) || SETTINGS.get(game.user.isGM ? ManualRolls.PREF_GM_STATE : ManualRolls.PREF_PC_STATE);\n\t\treturn !this.tempDisable && (state === 'always' || (state === 'toggle' && this.toggled));\n\t}\n\n\tstatic patch() {\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'Roll.prototype._evaluate', this._Roll_evaluate, 'MIXED');\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'DiceTerm.prototype._evaluate', this._DiceTerm_evaluate, 'MIXED');\n\t}\n\tstatic unpatch() {\n\t\tlibWrapper.unregister(SETTINGS.MOD_NAME, 'Roll.prototype._identifyTerms', false);\n\t\tlibWrapper.unregister(SETTINGS.MOD_NAME, 'DiceTerm.prototype.roll', false);\n\t}\n\n\tprivate static async _Roll_evaluate(this: Roll, wrapper: (arg: any) => any, { minimize = false, maximize = false } = {}): Promise<Roll> {\n\t\t// Ignore Min/Max requests and if we are disabled\n\t\tif (!ManualRolls.shouldRollManually || minimize || maximize) {\n\t\t\treturn wrapper({ minimize, maximize });\n\t\t}\n\n\t\t/****** THIS IS CAPTURED DIRECTLY FROM Roll.prototype._evaluate ******/\n\t\t// Step 1 - Replace intermediate terms with evaluated numbers\n\t\tconst intermediate = [];\n\t\tfor (const element of this.terms) {\n\t\t\tlet term: any = element;\n\t\t\tif (!(term instanceof RollTerm)) {\n\t\t\t\tthrow new Error(\"Roll evaluation encountered an invalid term which was not a RollTerm instance\");\n\t\t\t}\n\t\t\tif (term.isIntermediate) {\n\t\t\t\tawait term.evaluate({ minimize, maximize, async: true });\n\t\t\t\tthis._dice = this._dice.concat((<any>term).dice);\n\t\t\t\tterm = new NumericTerm({ number: <number>term.total, options: (<any>term).options });\n\t\t\t}\n\t\t\tintermediate.push(term);\n\t\t}\n\t\tthis.terms = intermediate;\n\n\t\t// Step 2 - Simplify remaining terms\n\t\tthis.terms = (this.constructor as any).simplifyTerms(this.terms);\n\n\t\t/****** DF MANUAL ROLLS MODIFICATION ******/\n\t\t// @ts-ignore\n\t\tconst rollPrompt = new RollPrompt({}, this.options.flavor ? { title: this.options.flavor } : {});\n\n\t\tfor (const term of this.terms) {\n\t\t\tif (!(term instanceof DiceTerm)) continue;\n\t\t\t(<any>term).rollPrompt = rollPrompt;\n\t\t}\n\n\t\t// Step 3 - Evaluate remaining terms\n\t\tconst promises: Promise<RollTerm>[] = [];\n\t\tfor (const term of this.terms) {\n\t\t\t// @ts-ignore\n\t\t\tif (term._evaluated) continue;\n\t\t\tpromises.push(term.evaluate({ minimize, maximize, async: true }));\n\t\t}\n\t\tawait rollPrompt.render(true);\n\t\tawait Promise.all(promises);\n\t\t/************ END MODIFICATION ************/\n\n\t\t// Step 4 - Evaluate the final expression\n\t\tthis._total = this._evaluateTotal();\n\t\treturn this;\n\t\t/****** END OF CAPTURE ******/\n\t}\n\n\tprivate static async _DiceTerm_evaluate(this: DiceTerm, wrapper: AnyFunction, { minimize = false, maximize = false } = {}): Promise<DiceTerm> {\n\t\tconst rollPrompt: RollPrompt = (<any>this).rollPrompt;\n\t\t// Ignore Min/Max requests, if we are disabled, or if this dice term does not have a bound DFRollPrompt\n\t\tif (!ManualRolls.shouldRollManually || !rollPrompt || minimize || maximize)\n\t\t\treturn wrapper(minimize, maximize);\n\t\tconst results = await rollPrompt.requestResult(this);\n\t\tfor (const x of results) this.results.push({ result: x, active: true });\n\t\tthis._evaluateModifiers();\n\t\treturn this;\n\t}\n}\n","import ManualRolls from \"./ManualRolls\";\nimport RollPrompt from \"./RollPrompt\";\nimport SETTINGS from \"../../common/Settings\";\n\n/***** Pathfinder1 Roller Declaration *****/\ndeclare class RollPF {\n\tstatic safeRoll(p1: any, p2: any): any;\n}\n\nexport default class ManualRollsLegacy {\n\tstatic PREF_USE_LEGACY = 'use-legacy';\n\n\tstatic get useLegacy(): boolean { return SETTINGS.get(ManualRollsLegacy.PREF_USE_LEGACY); }\n\n\tprivate static pf1HelpersPatched = false;\n\n\tstatic patch() {\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'DiceTerm.prototype._evaluateSync', this._DiceTerm_evaluateSync, 'MIXED');\n\n\t\tif (this.pf1HelpersPatched) return;\n\t\tthis.pf1HelpersPatched = true;\n\t\t\n\t\t/*******************************************************/\n\t\t/************** This Code Copied From PF1 **************/\n\t\t/*******************************************************/\n\t\tHandlebars.registerHelper(\"itemDamage\", (item, rollData) => {\n\t\t\tif (!item.hasDamage) return null; // It was a mistake to call this\n\n\t\t\tconst actorData = item.document.parentActor.data.data,\n\t\t\t\titemData = item.data;\n\n\t\t\tconst rv = [];\n\n\t\t\tconst reduceFormula = (formula: any) => {\n\t\t\t\t/******** MODIFIED PORTION START ********/\n\t\t\t\tlet roll: any;\n\t\t\t\ttry {\n\t\t\t\t\tManualRolls.tempDisable = true;\n\t\t\t\t\troll = RollPF.safeRoll(formula, rollData);\n\t\t\t\t} finally {\n\t\t\t\t\tManualRolls.tempDisable = false;\n\t\t\t\t}\n\t\t\t\t/******** MODIFIED PORTION END ********/\n\t\t\t\tformula = roll.formula.replace(/\\[[^\\]]+\\]/g, \"\"); // remove flairs\n\t\t\t\treturn [roll, formula];\n\t\t\t};\n\n\t\t\tconst handleParts = (parts: any) => {\n\t\t\t\tfor (const [formula, _] of parts) {\n\t\t\t\t\tconst [roll, newformula] = reduceFormula(formula);\n\t\t\t\t\tif (roll.total == 0) continue;\n\t\t\t\t\trv.push(newformula);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Normal damage parts\n\t\t\thandleParts(itemData.damage.parts);\n\n\t\t\t// Include ability score only if the string isn't too long yet\n\t\t\tconst dmgAbl = itemData.ability.damage;\n\t\t\tconst dmgAblMod = Math.floor((actorData.abilities[dmgAbl]?.mod ?? 0) * (itemData.ability.damageMult || 1));\n\t\t\tif (dmgAblMod != 0) rv.push(dmgAblMod);\n\n\t\t\t// Include damage parts that don't happen on crits\n\t\t\thandleParts(itemData.damage.nonCritParts);\n\n\t\t\t// Include general sources. Item enhancement bonus is among these.\n\t\t\tconst sources = item.document.allDamageSources;\n\t\t\tfor (const s of sources) rv.push(s.formula);\n\n\t\t\tif (rv.length === 0) rv.push(\"NaN\"); // Something probably went wrong\n\n\t\t\treturn rv\n\t\t\t\t.join(\"+\")\n\t\t\t\t.replace(/\\s+/g, \"\") // remove whitespaces\n\t\t\t\t.replace(/\\+-/, \"-\") // simplify math logic pt.1\n\t\t\t\t.replace(/--/g, \"+\") // simplify math logic pt.2\n\t\t\t\t.replace(/\\+\\++/, \"+\"); // simplify math logic pt.3\n\t\t});\n\t\t/********************************************************/\n\t\t/**************** END OF COPIED PF1 CODE ****************/\n\t\t/********************************************************/\n\t}\n\tstatic unpatch() {\n\t\tlibWrapper.unregister(SETTINGS.MOD_NAME, 'DiceTerm.prototype.roll', false);\n\t}\n\n\tstatic _DiceTerm_evaluateSync(this: DiceTerm, wrapper: AnyFunction, { minimize = false, maximize = false } = {}) {\n\t\tif ((this.number > 999)) {\n\t\t\tthrow new Error(`You may not evaluate a DiceTerm with more than 999 requested results`);\n\t\t}\n\n\t\t// ignore min/max rolls\n\t\tif (!ManualRolls.shouldRollManually || minimize || maximize)\n\t\t\treturn wrapper({ minimize, maximize });\n\n\t\t// if there are no modifiers, display a \"total\" roll request\n\t\tif (this.modifiers.length == 0) {\n\t\t\tconst total = ManualRollsLegacy.prompt(this.number, this.faces, this.flavor);\n\t\t\tconst results = RollPrompt.distributeRoll(total[0], this.number);\n\t\t\tthis.results = results.map(x => { return { result: x, active: true }; });\n\t\t\tif (ManualRolls.flagged && total[1]) {\n\t\t\t\tthis.options.flavor = (this.options.flavor || '') + '[MRT]';\n\t\t\t\t(<any>this.options).isManualRoll = true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst flags = [];\n\t\t\tfor (let n = 1; n <= this.number; n++) {\n\t\t\t\tconst roll: { result: number, active: boolean } = { result: undefined, active: true };\n\t\t\t\tif (minimize) {\n\t\t\t\t\troll.result = Math.min(1, this.faces);\n\t\t\t\t\tflags.push('RN');\n\t\t\t\t}\n\t\t\t\telse if (maximize) {\n\t\t\t\t\troll.result = this.faces;\n\t\t\t\t\tflags.push('RN');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst result = ManualRollsLegacy.prompt(1, this.faces, this.flavor);\n\t\t\t\t\troll.result = result[0];\n\t\t\t\t\tflags.push(result[1] ? 'MR' : 'RN');\n\t\t\t\t}\n\t\t\t\tthis.results.push(roll);\n\t\t\t}\n\t\t\tif (ManualRolls.flagged && flags.some(x => x === 'MR')) {\n\t\t\t\tthis.options.flavor = (this.options.flavor || '') + '[' + flags.join(',') + ']';\n\t\t\t\t(<any>this.options).isManualRoll = true;\n\t\t\t}\n\t\t}\n\t\tthis._evaluateModifiers();\n\t\treturn this;\n\t}\n\n\tstatic prompt(number: number, faces: number, flavour: string): [number, boolean] {\n\t\tlet failed = false;\n\t\tlet result: [number, boolean] = [0, false];\n\t\tconst promptText = game.i18n.localize('DF_MANUAL_ROLLS.Prompt.Legacy')\n\t\t\t.dfmr_replaceAll('{0}', number.toString())\n\t\t\t.dfmr_replaceAll('{1}', faces.toString())\n\t\t\t.dfmr_replaceAll('{2}', (number * faces).toString());\n\t\tconst invalidText = game.i18n.localize('DF_MANUAL_ROLLS.Prompt.Legacy_Invalid');\n\t\twhile (true) {\n\t\t\tlet value: string | number =\n\t\t\t\tprompt(promptText + (flavour ? `\\n${flavour}` : '') + (failed ? '\\n' + invalidText : ''), '');\n\t\t\tif (value === '' || value === null)\n\t\t\t\tresult = [Math.ceil(CONFIG.Dice.randomUniform() * faces), false];\n\t\t\telse {\n\t\t\t\tvalue = parseInt(value);\n\t\t\t\tresult = [value, true];\n\t\t\t\tif (isNaN(<number>value) || value < number || value > number * faces) {\n\t\t\t\t\tfailed = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n}","import ManualRolls from \"./ManualRolls\";\nimport SETTINGS from \"../../common/Settings\";\n\ninterface RollPromptData {\n\tid: number;\n\tres: AnyFunction;\n\tterm: DiceTerm;\n}\ninterface RenderData {\n\tid: string;\n\tidx: number;\n\tfaces: string;\n\thasTotal: boolean;\n\tterm: DiceTerm\n}\n\nexport default class RollPrompt extends FormApplication<FormApplicationOptions, { terms: RenderData[] }> {\n\n\tstatic readonly PREF_FOCUS_INPUT = 'focus-input';\n\n\tprivate _nextId = 0;\n\tprivate _terms: RollPromptData[] = [];\n\tprivate _rolled = false;\n\n\tstatic get focusInput(): boolean { return SETTINGS.get(RollPrompt.PREF_FOCUS_INPUT); }\n\n\tstatic get defaultOptions(): FormApplicationOptions {\n\t\treturn <FormApplicationOptions>mergeObject(\n\t\t\t<DeepPartial<FormApplicationOptions>>FormApplication.defaultOptions,\n\t\t\t{\n\t\t\t\ttitle: game.i18n.localize(\"DF_MANUAL_ROLLS.Prompt.DefaultTitle\"),\n\t\t\t\ttemplate: `modules/${SETTINGS.MOD_NAME}/templates/roll-prompt.hbs`,\n\t\t\t\twidth: 400,\n\n\t\t\t});\n\t}\n\n\tgetData(_options?: Application.RenderOptions): { terms: RenderData[] } {\n\t\tconst data: RenderData[] = [];\n\t\tfor (const term of this._terms) {\n\t\t\tconst die = term.term;\n\t\t\tfor (let c = 0; c < die.number; c++) {\n\t\t\t\tdata.push({\n\t\t\t\t\tid: term.id.toString(),\n\t\t\t\t\tidx: c,\n\t\t\t\t\tfaces: c == 0 ? `${die.number}d${die.faces}${die.modifiers.length > 0 ? ' [' + die.modifiers.join(',') + ']' : ''}` : '',\n\t\t\t\t\thasTotal: c == 0 && die.modifiers.length == 0 && die.number > 1,\n\t\t\t\t\tterm: die\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn { terms: data };\n\t}\n\tclose(options?: FormApplication.CloseOptions): Promise<void> {\n\t\t// If we have not actually rolled anything yet, we need to resolve these with RNG values\n\t\tif (!this._rolled) {\n\t\t\tthis._rolled = true;\n\t\t\tfor (const x of this._terms) {\n\t\t\t\tconst results: number[] = [];\n\t\t\t\tfor (let c = 0; c < x.term.number; c++) {\n\t\t\t\t\tresults.push(Math.ceil(CONFIG.Dice.randomUniform() * x.term.faces));\n\t\t\t\t}\n\t\t\t\tx.res(results);\n\t\t\t}\n\t\t}\n\t\treturn super.close(options);\n\t}\n\trender(force?: boolean, options?: Application.RenderOptions) {\n\t\tif (this._terms.length == 0) return;\n\t\treturn super.render(force, options);\n\t}\n\tasync _render(force?: boolean, options?: Application.RenderOptions) {\n\t\tawait super._render(force, options);\n\t\tif (RollPrompt.focusInput)\n\t\t\tthis.element.find('input')[0].focus();\n\t}\n\tprotected _updateObject(_: Event, formData?: { [key: string]: string | null }): Promise<unknown> {\n\t\tfor (const x of this._terms) {\n\t\t\tconst results: number[] = [];\n\t\t\tconst total = formData[`${x.id}-total`];\n\t\t\t// If a total input was defined and given, it overrides everything else.\n\t\t\tif (total !== undefined && total !== null) {\n\t\t\t\tconst value = parseInt(total);\n\t\t\t\tresults.push(...RollPrompt.distributeRoll(value, x.term.number));\n\t\t\t\tif (ManualRolls.flagged)\n\t\t\t\t\tx.term.options.flavor = (x.term.options.flavor || '') + '[MRT]';\n\t\t\t} else {\n\t\t\t\tconst flags = [];\n\t\t\t\tfor (let c = 0; c < x.term.number; c++) {\n\t\t\t\t\tconst roll = formData[`${x.id}-${c}`];\n\t\t\t\t\tlet value = parseInt(roll);\n\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\tvalue = Math.ceil(CONFIG.Dice.randomUniform() * x.term.faces);\n\t\t\t\t\t\tflags.push('RN');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflags.push('MR');\n\t\t\t\t\t\t(<any>x.term.options).isManualRoll = true;\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(value);\n\t\t\t\t}\n\t\t\t\tif (ManualRolls.flagged && flags.some(x => x === 'MR')) {\n\t\t\t\t\tx.term.options.flavor = (x.term.options.flavor || '') + '[' + flags.join(',') + ']';\n\t\t\t\t\t(<any>x.term.options).isManualRoll = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tx.res(results);\n\t\t}\n\t\tthis._rolled = true;\n\t\treturn undefined;\n\t}\n\n\trequestResult(term: DiceTerm): Promise<number[]> {\n\t\treturn new Promise((res, _) => this._terms.push({ id: this._nextId++, res, term }));\n\t}\n\n\tstatic distributeRoll(total: number, count: number): number[] {\n\t\tconst results: number[] = [];\n\t\t// If a total input was defined and given, it overrides everything else.\n\t\tlet base = 0;\n\t\t// Append dice with the base average of the total.\n\t\tfor (let c = 0; c < count - 1; c++) {\n\t\t\tbase = Math.ceil(total / (count - results.length));\n\t\t\ttotal -= base;\n\t\t\tresults.push(base);\n\t\t}\n\t\tresults.push(total);\n\t\treturn results;\n\t}\n}","import SETTINGS from \"../../common/Settings\";\nimport ManualRolls from \"./ManualRolls\";\n\nexport default class RollSettings {\n\tstatic init() {\n\t\tHooks.on('renderPlayerList', (app: PlayerList, html: JQuery<HTMLElement>) => {\n\t\t\tif (!game.user.isGM) return;\n\t\t\thtml.find('li.player').each((_idx, element) => {\n\t\t\t\tconst userId = element.getAttribute('data-user-id');\n\t\t\t\tconst user = game.users.get(userId);\n\t\t\t\tconst rollType = user.getFlag(SETTINGS.MOD_NAME, ManualRolls.FLAG_ROLL_TYPE);\n\t\t\t\tif (!rollType) return;\n\t\t\t\tlet html = '';\n\t\t\t\tswitch (user.getFlag(SETTINGS.MOD_NAME, ManualRolls.FLAG_ROLL_TYPE) ?? SETTINGS.get(ManualRolls.PREF_PC_STATE)) {\n\t\t\t\t\tcase 'disabled': html = `<i class=\"fas fa-dice\" title=\"${'DF_MANUAL_ROLLS.Setting_Options.Disabled'.localize()}\"></i>`; break;\n\t\t\t\t\tcase 'always': html = `<i class=\"fas fa-keyboard\" title=\"${'DF_MANUAL_ROLLS.Setting_Options.Always'.localize()}\"></i>`; break;\n\t\t\t\t\tcase 'toggle': html = `<i class=\"fas fa-toggle-on\" title=\"${'DF_MANUAL_ROLLS.Setting_Options.Toggle'.localize()}\"></i>`; break;\n\t\t\t\t}\n\t\t\t\t$(element).append(`<span class=\"player-roll-type\">${html}</span>`);\n\t\t\t});\n\t\t});\n\t\tHooks.on('renderUserConfig', (app: UserConfig, html: JQuery<HTMLElement>) => {\n\t\t\tif (!game.user.isGM) return;\n\t\t\tconst rollType = app.object.getFlag(SETTINGS.MOD_NAME, ManualRolls.FLAG_ROLL_TYPE);\n\t\t\tconst rollConfig = $(`<div class=\"form-group\">\n\t<label>${'Manual Roll Override'.localize()}</label>\n\t<div class=\"form-fields\" style=\"width:${html.find('#characters').parent().outerWidth()}px\">\n\t\t<select name=\"flags.df-manual-rolls.roll-type\">\n\t\t\t<option value=\"\" ${!rollType ? 'selected' : ''}></option>\n\t\t\t<option value=\"disabled\" ${rollType === 'disabled' ? 'selected' : ''}>${'DF_MANUAL_ROLLS.Setting_Options.Disabled'.localize()}</option>\n\t\t\t<option value=\"always\" ${rollType === 'always' ? 'selected' : ''}>${'DF_MANUAL_ROLLS.Setting_Options.Always'.localize()}</option>\n\t\t\t<option value=\"toggle\" ${rollType === 'toggle' ? 'selected' : ''}>${'DF_MANUAL_ROLLS.Setting_Options.Toggle'.localize()}</option>\n\t\t</select>\n\t</div>\n</div>`);\n\t\t\thtml.find('#characters').parent().before(rollConfig);\n\t\t\t// Resize the window\n\t\t\tapp.element[0].style.height = '';\n\t\t\tapp.element[0].style.width = '';\n\t\t\tapp.setPosition({});\n\t\t\tif (!(app as any)._updateObject_ORIG) {\n\t\t\t\t(app as any)._updateObject_ORIG = (app as any)._updateObject;\n\t\t\t\t(app as any)._updateObject = async function (...args: any) {\n\t\t\t\t\tconst result = await (this as any)._updateObject_ORIG(...args);\n\t\t\t\t\tui.controls.initialize();\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import ManualRolls from \"./ManualRolls\";\nimport ManualRollsLegacy from \"./ManualRollsLegacy\";\nimport RollPrompt from \"./RollPrompt\";\nimport SETTINGS from \"../../common/Settings\";\nimport RollSettings from \"./RollSettings\";\n\nSETTINGS.init('df-manual-rolls');\n\nHooks.on('init', function () {\n\n\tSETTINGS.register(ManualRolls.PREF_GM_STATE, {\n\t\tconfig: true,\n\t\tscope: 'world',\n\t\tname: 'DF_MANUAL_ROLLS.Settings.GM_Name',\n\t\thint: 'DF_MANUAL_ROLLS.Settings.GM_Hint',\n\t\tdefault: 'disabled',\n\t\tchoices: {\n\t\t\tdisabled: 'DF_MANUAL_ROLLS.Setting_Options.Disabled',\n\t\t\talways: 'DF_MANUAL_ROLLS.Setting_Options.Always',\n\t\t\ttoggle: 'DF_MANUAL_ROLLS.Setting_Options.Toggle'\n\t\t},\n\t\tonChange: () => { ui.controls.initialize(); }\n\t});\n\n\tSETTINGS.register(ManualRolls.PREF_PC_STATE, {\n\t\tconfig: true,\n\t\tscope: 'world',\n\t\tname: 'DF_MANUAL_ROLLS.Settings.PC_Name',\n\t\thint: 'DF_MANUAL_ROLLS.Settings.PC_Hint',\n\t\tdefault: 'disabled',\n\t\tchoices: {\n\t\t\tdisabled: 'DF_MANUAL_ROLLS.Setting_Options.Disabled',\n\t\t\talways: 'DF_MANUAL_ROLLS.Setting_Options.Always',\n\t\t\ttoggle: 'DF_MANUAL_ROLLS.Setting_Options.Toggle'\n\t\t},\n\t\tonChange: () => { ui.controls.initialize(); }\n\t});\n\n\tSETTINGS.register(RollPrompt.PREF_FOCUS_INPUT, {\n\t\tconfig: true,\n\t\tscope: 'client',\n\t\tname: 'DF_MANUAL_ROLLS.Settings.FocusInput_Name',\n\t\thint: 'DF_MANUAL_ROLLS.Settings.FocusInput_Hint',\n\t\ttype: Boolean,\n\t\tdefault: true\n\t});\n\n\tSETTINGS.register(ManualRolls.PREF_FLAGGED, {\n\t\tname: \"DF_MANUAL_ROLLS.Settings.Flagged_Name\",\n\t\thint: \"DF_MANUAL_ROLLS.Settings.Flagged_Hint\",\n\t\tscope: 'world',\n\t\tconfig: true,\n\t\ttype: Boolean,\n\t\tdefault: false\n\t});\n\n\tSETTINGS.register(ManualRolls.PREF_TOGGLED, {\n\t\tconfig: false,\n\t\tscope: 'client',\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t\tonChange: (value: boolean) => {\n\t\t\tconst button = $('ol#controls>li#df-manual-roll-toggle');\n\t\t\tif (value) button.addClass('active');\n\t\t\telse button.removeClass('active');\n\t\t}\n\t});\n\tHooks.on('getSceneControlButtons', (controls: SceneControl[]) => {\n\t\tif (!ManualRolls.toggleable) return;\n\t\tcontrols.find(x => x.name === 'token').tools.push({\n\t\t\ticon: 'fas fa-dice-d20',\n\t\t\tname: 'manualRoll',\n\t\t\ttitle: 'DF_MANUAL_ROLLS.SceneControlTitle',\n\t\t\tvisible: ManualRolls.toggleable,\n\t\t\ttoggle: true,\n\t\t\tactive: ManualRolls.toggled,\n\t\t\tonClick: (toggled: boolean) => ManualRolls.setToggled(toggled)\n\t\t});\n\t});\n\n\n\tSETTINGS.register(ManualRollsLegacy.PREF_USE_LEGACY, {\n\t\tname: 'Enable Legacy Synchronous Rolls',\n\t\thint: 'Some systems and modules have not migrated their roll calls to the new Async Roll System in FoundryVTT. To handle the use of the deprecated legacy roll system, this will enabled the old prompts for roll input.',\n\t\tconfig: true,\n\t\tscope: 'world',\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t\tonChange: (value: boolean) => {\n\t\t\tif (value) ManualRollsLegacy.patch();\n\t\t\telse ManualRollsLegacy.unpatch();\n\t\t}\n\t});\n\n\tRollSettings.init();\n});\nHooks.on('ready', function () {\n\tif (!game.modules.get('lib-wrapper')?.active && game.user.isGM) {\n\t\tui.notifications.error(game.i18n.localize(\"DF_MANUAL_ROLLS.Error_libWrapper_Missing\"));\n\t\treturn;\n\t}\n\tHandlebars.registerHelper({ dfmr_mul: (v1, v2) => v1 * v2 });\n\tManualRolls.patch();\n\tif (SETTINGS.get(ManualRollsLegacy.PREF_USE_LEGACY))\n\t\tManualRollsLegacy.patch();\n});\n\nHooks.on('createChatMessage', async (chatMessage: ChatMessage) => {\n\tif (!chatMessage.user || chatMessage.user.id !== game.userId) return;\n\t// Ignore non-roll, non-flagged, non-manual messages\n\tif (!chatMessage.isRoll || !ManualRolls.flagged || !ManualRolls.shouldRollManually) return;\n\tlet flavor = game.i18n.localize(\"DF_MANUAL_ROLLS.Flag\");\n\t// If all of the manual rolls were cancelled, don't set the flag\n\tif (!chatMessage.roll.terms.some((value: any) => value instanceof DiceTerm && (<any>value.options).isManualRoll))\n\t\treturn;\n\tif (chatMessage.data.flavor)\n\t\tflavor += \" \" + chatMessage.data.flavor;\n\tawait chatMessage.update({ flavor: flavor });\n});"],"names":["SETTINGS","static","moduleName","this","MOD_NAME","String","prototype","localize","game","i18n","valueOf","key","config","settings","register","registerMenu","get","value","set","default","Object","dfmr_replaceAll","token","replacement","split","join","ManualRolls","flagged","PREF_FLAGGED","toggled","PREF_TOGGLED","toggleable","user","getFlag","FLAG_ROLL_TYPE","isGM","PREF_GM_STATE","PREF_PC_STATE","shouldRollManually","state","tempDisable","libWrapper","_Roll_evaluate","_DiceTerm_evaluate","unregister","wrapper","minimize","maximize","intermediate","element","terms","term","RollTerm","Error","isIntermediate","evaluate","async","_dice","concat","dice","NumericTerm","number","total","options","push","constructor","simplifyTerms","rollPrompt","flavor","title","DiceTerm","promises","_evaluated","render","Promise","all","_total","_evaluateTotal","results","requestResult","x","result","active","_evaluateModifiers","ManualRollsLegacy","useLegacy","PREF_USE_LEGACY","_DiceTerm_evaluateSync","pf1HelpersPatched","Handlebars","registerHelper","item","rollData","hasDamage","actorData","document","parentActor","data","itemData","rv","reduceFormula","formula","roll","RollPF","safeRoll","replace","handleParts","parts","_","newformula","damage","dmgAbl","ability","dmgAblMod","Math","floor","abilities","mod","damageMult","nonCritParts","sources","allDamageSources","s","length","modifiers","prompt","faces","map","isManualRoll","flags","n","undefined","min","some","flavour","failed","promptText","toString","invalidText","ceil","CONFIG","Dice","randomUniform","parseInt","isNaN","RollPrompt","FormApplication","_nextId","_terms","_rolled","focusInput","PREF_FOCUS_INPUT","defaultOptions","mergeObject","template","width","getData","_options","die","c","id","idx","hasTotal","close","res","super","force","_render","find","focus","_updateObject","formData","distributeRoll","count","base","RollSettings","Hooks","on","app","html","each","_idx","userId","getAttribute","users","$","append","rollType","object","rollConfig","parent","outerWidth","before","style","height","setPosition","_updateObject_ORIG","args","ui","controls","initialize","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","scope","name","hint","choices","disabled","always","toggle","onChange","type","Boolean","button","addClass","removeClass","tools","icon","visible","onClick","modules","dfmr_mul","v1","v2","notifications","error","chatMessage","isRoll","update"],"sourceRoot":""}